--- .elm/0.19.1/packages/elm/url/1.0.0/src/Url.elm	2020-07-03 20:29:19.592268031 +0200
+++ elm.bak/0.19.1/packages/elm/url/1.0.0/src/Url.elm	2020-07-03 18:31:40.041593826 +0200
@@ -1,24 +1,22 @@
 module Url exposing
-  ( Url
-  , Protocol(..)
-  , toString
-  , fromString
-  , percentEncode
-  , percentDecode
-  )
-
+    ( Url, Protocol(..), toString, fromString
+    , percentEncode, percentDecode
+    )
 
 {-|
 
+
 # URLs
+
 @docs Url, Protocol, toString, fromString
 
+
 # Percent-Encoding
+
 @docs percentEncode, percentDecode
 
 -}
 
-
 import Elm.Kernel.Url
 
 
@@ -29,12 +27,10 @@
 {-| In [the URI spec](https://tools.ietf.org/html/rfc3986), Tim Berners-Lee
 says a URL looks like this:
 
-```
-  https://example.com:8042/over/there?name=ferret#nose
-  \___/   \______________/\_________/ \_________/ \__/
-    |            |            |            |        |
-  scheme     authority       path        query   fragment
-```
+      https://example.com:8042/over/there?name=ferret#nose
+      \___/   \______________/\_________/ \_________/ \__/
+        |            |            |            |        |
+      scheme     authority       path        query   fragment
 
 When you are creating a single-page app with [`Browser.fullscreen`][fs], you
 use the [`Url.Parser`](Url-Parser) module to turn a `Url` into even nicer data.
@@ -47,20 +43,25 @@
 **Note:** This is a subset of all the full possibilities listed in the URI
 spec. Specifically, it does not accept the `userinfo` segment you see in email
 addresses like `tom@example.com`.
+
 -}
 type alias Url =
-  { protocol : Protocol
-  , host : String
-  , port_ : Maybe Int
-  , path : String
-  , query : Maybe String
-  , fragment : Maybe String
-  }
+    { protocol : Protocol
+    , host : String
+    , port_ : Maybe Int
+    , path : String
+    , query : Maybe String
+    , fragment : Maybe String
+    }
 
 
 {-| Is the URL served over a secure connection or not?
 -}
-type Protocol = Http | Https
+type Protocol
+    = Http
+    | Https
+    | File
+    | File2
 
 
 {-| Attempt to break a URL up into [`Url`](#Url). This is useful in
@@ -99,123 +100,166 @@
 
 The conversion to segments can fail in some cases as well:
 
-    fromString "example.com:443"        == Nothing  -- no protocol
-    fromString "http://tom@example.com" == Nothing  -- userinfo disallowed
-    fromString "http://#cats"           == Nothing  -- no host
+    fromString "example.com:443" == Nothing -- no protocol
+
+    fromString "http://tom@example.com" == Nothing -- userinfo disallowed
+
+    fromString "http://#cats" == Nothing -- no host
 
 **Note:** This function does not use [`percentDecode`](#percentDecode) anything.
 It just splits things up. [`Url.Parser`](Url-Parser) actually _needs_ the raw
 `query` string to parse it properly. Otherwise it could get confused about `=`
 and `&` characters!
+
 -}
 fromString : String -> Maybe Url
 fromString str =
-  if String.startsWith "http://" str then
-    chompAfterProtocol Http (String.dropLeft 7 str)
+    if String.startsWith "http://" str then
+        chompAfterProtocol Http (String.dropLeft 7 str)
+
+    else if String.startsWith "https://" str then
+        chompAfterProtocol Https (String.dropLeft 8 str)
 
-  else if String.startsWith "https://" str then
-    chompAfterProtocol Https (String.dropLeft 8 str)
+    else if String.startsWith "file:///" str then
+        chompAfterProtocol File2 (String.dropLeft 8 str)
 
-  else
-    Nothing
+    else if String.startsWith "file://" str then
+        chompAfterProtocol File (String.dropLeft 7 str)
+
+    else
+        Nothing
 
 
 chompAfterProtocol : Protocol -> String -> Maybe Url
 chompAfterProtocol protocol str =
-  if String.isEmpty str then
-    Nothing
-  else
-    case String.indexes "#" str of
-      [] ->
-        chompBeforeFragment protocol Nothing str
+    if String.isEmpty str then
+        Nothing
+
+    else
+        case String.indexes "#" str of
+            [] ->
+                chompBeforeFragment protocol Nothing str
 
-      i :: _ ->
-        chompBeforeFragment protocol (Just (String.dropLeft (i + 1) str)) (String.left i str)
+            i :: _ ->
+                chompBeforeFragment protocol (Just (String.dropLeft (i + 1) str)) (String.left i str)
 
 
 chompBeforeFragment : Protocol -> Maybe String -> String -> Maybe Url
 chompBeforeFragment protocol frag str =
-  if String.isEmpty str then
-    Nothing
-  else
-    case String.indexes "?" str of
-      [] ->
-        chompBeforeQuery protocol Nothing frag str
+    if String.isEmpty str then
+        Nothing
+
+    else
+        case String.indexes "?" str of
+            [] ->
+                chompBeforeQuery protocol Nothing frag str
 
-      i :: _ ->
-        chompBeforeQuery protocol (Just (String.dropLeft (i + 1) str)) frag (String.left i str)
+            i :: _ ->
+                chompBeforeQuery protocol (Just (String.dropLeft (i + 1) str)) frag (String.left i str)
 
 
 chompBeforeQuery : Protocol -> Maybe String -> Maybe String -> String -> Maybe Url
 chompBeforeQuery protocol params frag str =
-  if String.isEmpty str then
-    Nothing
-  else
-    case String.indexes "/" str of
-      [] ->
-        chompBeforePath protocol "/" params frag str
+    if String.isEmpty str then
+        Nothing
+
+    else
+        case String.indexes "/" str of
+            [] ->
+                chompBeforePath protocol "/" params frag str
 
-      i :: _ ->
-        chompBeforePath protocol (String.dropLeft i str) params frag (String.left i str)
+            i :: _ ->
+                chompBeforePath protocol (String.dropLeft i str) params frag (String.left i str)
 
 
 chompBeforePath : Protocol -> String -> Maybe String -> Maybe String -> String -> Maybe Url
 chompBeforePath protocol path params frag str =
-  if String.isEmpty str || String.contains "@" str then
-    Nothing
-  else
-    case String.indexes ":" str of
-      [] ->
-        Just <| Url protocol str Nothing path params frag
-
-      i :: [] ->
-        case String.toInt (String.dropLeft (i + 1) str) of
-          Nothing ->
-            Nothing
+    if String.isEmpty str || String.contains "@" str then
+        Nothing
 
-          port_ ->
-            Just <| Url protocol (String.left i str) port_ path params frag
+    else
+        {- case String.indexes ":" str of
+           [] ->
+               Just <| Url protocol str Nothing path params frag
+
+           i :: [] ->
+               case String.toInt (String.dropLeft (i + 1) str) of
+                   Nothing ->
+                       Nothing
+
+                   port_ ->
+                       Just <| Url protocol (String.left i str) port_ path params frag
+
+           _ ->
+               Nothing
+        -}
+        case String.indexes ":" str of
+            [] ->
+                Just <| Url protocol str Nothing path params frag
+
+            i :: [] ->
+                case String.toInt (String.dropLeft (i + 1) str) of
+                    Nothing ->
+                        Just <| Url protocol str Nothing path params frag
+
+                    port_ ->
+                        Just <| Url protocol (String.left i str) port_ path params frag
+
+            _ :: i :: [] ->
+                case String.toInt (String.dropLeft (i + 1) str) of
+                    Nothing ->
+                        Just <| Url protocol str Nothing path params frag
 
-      _ ->
-        Nothing
+                    port_ ->
+                        Just <| Url protocol (String.left i str) port_ path params frag
+
+            _ ->
+                Nothing
 
 
 {-| Turn a [`Url`](#Url) into a `String`.
 -}
 toString : Url -> String
 toString url =
-  let
-    http =
-      case url.protocol of
-        Http ->
-          "http://"
-
-        Https ->
-          "https://"
-  in
-  addPort url.port_ (http ++ url.host) ++ url.path
-    |> addPrefixed "?" url.query
-    |> addPrefixed "#" url.fragment
+    let
+        http =
+            case url.protocol of
+                Http ->
+                    "http://"
+
+                Https ->
+                    "https://"
+
+                File ->
+                    "file://"
+
+                File2 ->
+                    "file:///"
+    in
+    addPort url.port_ (http ++ url.host)
+        ++ url.path
+        |> addPrefixed "?" url.query
+        |> addPrefixed "#" url.fragment
 
 
 addPort : Maybe Int -> String -> String
 addPort maybePort starter =
-  case maybePort of
-    Nothing ->
-      starter
+    case maybePort of
+        Nothing ->
+            starter
 
-    Just port_ ->
-      starter ++ ":" ++ String.fromInt port_
+        Just port_ ->
+            starter ++ ":" ++ String.fromInt port_
 
 
 addPrefixed : String -> Maybe String -> String -> String
 addPrefixed prefix maybeSegment starter =
-  case maybeSegment of
-    Nothing ->
-      starter
+    case maybeSegment of
+        Nothing ->
+            starter
 
-    Just segment ->
-      starter ++ prefix ++ segment
+        Just segment ->
+            starter ++ prefix ++ segment
 
 
 
@@ -234,13 +278,17 @@
 some examples:
 
     -- standard ASCII encoding
-    percentEncode "hat"   == "hat"
+    percentEncode "hat" == "hat"
+
     percentEncode "to be" == "to%20be"
-    percentEncode "99%"   == "99%25"
+
+    percentEncode "99%" == "99%25"
 
     -- non-standard, but widely accepted, UTF-8 encoding
     percentEncode "$" == "%24"
+
     percentEncode "¢" == "%C2%A2"
+
     percentEncode "€" == "%E2%82%AC"
 
 This is the same behavior as JavaScript's [`encodeURIComponent`][js] function,
@@ -251,10 +299,11 @@
 [uri]: https://tools.ietf.org/html/rfc3986
 [s2]: https://tools.ietf.org/html/rfc3986#section-2.1
 [wiki]: https://en.wikipedia.org/wiki/Percent-encoding
+
 -}
 percentEncode : String -> String
 percentEncode =
-  Elm.Kernel.Url.percentEncode
+    Elm.Kernel.Url.percentEncode
 
 
 {-| **Use [Url.Parser](Url-Parser) instead!** It will decode query
@@ -265,26 +314,33 @@
 This function does the opposite! Here are the reverse examples:
 
     -- ASCII
-    percentDecode "99%25"     == Just "hat"
-    percentDecode "to%20be"   == Just "to be"
-    percentDecode "hat"       == Just "99%"
+    percentDecode "99%25" == Just "hat"
+
+    percentDecode "to%20be" == Just "to be"
+
+    percentDecode "hat" == Just "99%"
 
     -- UTF-8
-    percentDecode "%24"       == Just "$"
-    percentDecode "%C2%A2"    == Just "¢"
+    percentDecode "%24" == Just "$"
+
+    percentDecode "%C2%A2" == Just "¢"
+
     percentDecode "%E2%82%AC" == Just "€"
 
 Why is it a `Maybe` though? Well, these strings come from strangers on the
 internet as a bunch of bits and may have encoding problems. For example:
 
-    percentDecode "%"   == Nothing  -- not followed by two hex digits
-    percentDecode "%XY" == Nothing  -- not followed by two HEX digits
-    percentDecode "%C2" == Nothing  -- half of the "¢" encoding "%C2%A2"
+    percentDecode "%" == Nothing -- not followed by two hex digits
+
+    percentDecode "%XY" == Nothing -- not followed by two HEX digits
+
+    percentDecode "%C2" == Nothing -- half of the "¢" encoding "%C2%A2"
 
 This is the same behavior as JavaScript's [`decodeURIComponent`][js] function.
 
 [js]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent
+
 -}
 percentDecode : String -> Maybe String
 percentDecode =
-  Elm.Kernel.Url.percentDecode
+    Elm.Kernel.Url.percentDecode
